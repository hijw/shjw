{"ast":null,"code":"var _jsxFileName = \"/Users/jungwon/Desktop/dumbjdumb-main/src/pages/Layer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport LayerList from \"../components/layer/LayerList\";\nimport \"../styles/common/Modifier.css\";\nimport \"../styles/layer/Layer.css\";\nimport Modifier from \"../components/common/Modifier\";\nimport NodeScreen from \"../components/common/NodeScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Layer(props) {\n  _s();\n  /** 서버에서 불러온 node, edge 초기화 **/\n  // const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  // const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  /** 수정 정보 관련 request **/\n  const [request, setRequest] = useState({\n    \"in_channels\": \"\",\n    \"out_channels\": \"\"\n  });\n  /** 클릭한 노드 정보 **/\n  const [selectedNode, setSelectedNode] = useState(null);\n  useEffect(() => {\n    /** node, edges 서버로부터 불러오기 **/\n    /*  서버에 저장된 node 정보 불러오기\n        axios.get(`url`)\n            .then(res => setNodes(res))\n            .catch(err => 예외처리)\n    */\n\n    /*  서버에 저장된 edge 정보 불러오기\n        axios.get(`url`)\n            .then(res => setEdges(res))\n            .catch(err => 예외처리)\n    */\n  }, []);\n\n  /** 클릭한 노드 selectedNode에 설정 **/\n  const onSelectNode = (event, nodeInfo) => {\n    setSelectedNode(nodeInfo);\n  };\n\n  /** Modifier 컴포넌트 input의 onChange **/\n  const onChange = _ref => {\n    let {\n      target: {\n        name,\n        value\n      }\n    } = _ref;\n    const next = {\n      ...request,\n      [name]: value\n    };\n    console.log(next);\n    setRequest(next);\n  };\n\n  /** 수정 버튼 눌렀을 때 API 요청 처리 **/\n  const onClickModify = () => {\n    /** 수정 API **/\n    // ex) axios.update(`url`,{request})\n    //          .then(res => local Node 수정)\n    //          .catch(err => 예외처리)\n  };\n\n  /** 수정 취소 눌렀을 때 **/\n  const onCancelModify = () => {\n    setSelectedNode(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"layer_outer_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside_function_container\",\n      children: [/*#__PURE__*/_jsxDEV(LayerList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modifier_outer_container\",\n        children: selectedNode && /*#__PURE__*/_jsxDEV(Modifier, {\n          request: request,\n          onChange: onChange,\n          selectedNode: selectedNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NodeScreen, {\n      onSelectNode: onSelectNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(Layer, \"gFgNE2WupFwlweDORX3okMQwMQU=\");\n_c = Layer;\nexport default Layer;\nvar _c;\n$RefreshReg$(_c, \"Layer\");","map":{"version":3,"names":["React","useEffect","useState","LayerList","Modifier","NodeScreen","jsxDEV","_jsxDEV","Layer","props","_s","request","setRequest","selectedNode","setSelectedNode","onSelectNode","event","nodeInfo","onChange","_ref","target","name","value","next","console","log","onClickModify","onCancelModify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jungwon/Desktop/dumbjdumb-main/src/pages/Layer.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LayerList from \"../components/layer/LayerList\";\nimport \"../styles/common/Modifier.css\";\nimport \"../styles/layer/Layer.css\";\nimport Modifier from \"../components/common/Modifier\";\nimport NodeScreen from \"../components/common/NodeScreen\";\n\n\nfunction Layer(props) {\n\n    /** 서버에서 불러온 node, edge 초기화 **/\n    // const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n    // const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n    /** 수정 정보 관련 request **/\n    const [request, setRequest] = useState({\n        \"in_channels\":\"\",\n        \"out_channels\": \"\",\n\n    });\n    /** 클릭한 노드 정보 **/\n    const [selectedNode, setSelectedNode] = useState(null);\n\n    useEffect(() => {\n        /** node, edges 서버로부터 불러오기 **/\n        /*  서버에 저장된 node 정보 불러오기\n            axios.get(`url`)\n                .then(res => setNodes(res))\n                .catch(err => 예외처리)\n        */\n\n        /*  서버에 저장된 edge 정보 불러오기\n            axios.get(`url`)\n                .then(res => setEdges(res))\n                .catch(err => 예외처리)\n        */\n    },[]);\n\n    /** 클릭한 노드 selectedNode에 설정 **/\n    const onSelectNode = (event, nodeInfo) => {\n        setSelectedNode(nodeInfo);\n    };\n\n    /** Modifier 컴포넌트 input의 onChange **/\n    const onChange = ({target:{name, value}}) => {\n        const next = {\n            ...request,\n            [name]: value,\n        };\n        console.log(next);\n        setRequest(next);\n    };\n\n    /** 수정 버튼 눌렀을 때 API 요청 처리 **/\n    const onClickModify = () => {\n        /** 수정 API **/\n        // ex) axios.update(`url`,{request})\n        //          .then(res => local Node 수정)\n        //          .catch(err => 예외처리)\n    };\n\n    /** 수정 취소 눌렀을 때 **/\n    const onCancelModify = () => {\n        setSelectedNode(null);\n    };\n\n    return (\n        <div className=\"layer_outer_container\">\n            <div className=\"aside_function_container\">\n                {/* 토글 관련 컴포넌트 */}\n                <LayerList/>\n                {/* 노드 눌렀을때 수정? 하는거랬나 그거 관련 컴포넌트 */}\n                <div className={\"modifier_outer_container\"}>\n                    {\n                        selectedNode && <Modifier request={request} onChange={onChange} selectedNode={selectedNode}/>\n                    }\n                </div>\n\n            </div>\n            {/* 노드 화면에 띄우는 컴포넌트 */}\n            <NodeScreen onSelectNode={onSelectNode}/>\n        </div>\n    );\n}\n\nexport default Layer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,SAAS,MAAM,+BAA+B;AACrD,OAAO,+BAA+B;AACtC,OAAO,2BAA2B;AAClC,OAAOC,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,UAAU,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzD,SAASC,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAElB;EACA;EACA;EACA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC;IACnC,aAAa,EAAC,EAAE;IAChB,cAAc,EAAE;EAEpB,CAAC,CAAC;EACF;EACA,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACZ;IACA;AACR;AACA;AACA;AACA;;IAEQ;AACR;AACA;AACA;AACA;EAJQ,CAKH,EAAC,EAAE,CAAC;;EAEL;EACA,MAAMc,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACtCH,eAAe,CAACG,QAAQ,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAGC,IAAA,IAA4B;IAAA,IAA3B;MAACC,MAAM,EAAC;QAACC,IAAI;QAAEC;MAAK;IAAC,CAAC,GAAAH,IAAA;IACpC,MAAMI,IAAI,GAAG;MACT,GAAGZ,OAAO;MACV,CAACU,IAAI,GAAGC;IACZ,CAAC;IACDE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBX,UAAU,CAACW,IAAI,CAAC;EACpB,CAAC;;EAED;EACA,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACxB;IACA;IACA;IACA;EAAA,CACH;;EAED;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzBb,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACIP,OAAA;IAAKqB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBAClCtB,OAAA;MAAKqB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBAErCtB,OAAA,CAACJ,SAAS;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,eAEZ1B,OAAA;QAAKqB,SAAS,EAAE,0BAA2B;QAAAC,QAAA,EAEnChB,YAAY,iBAAIN,OAAA,CAACH,QAAQ;UAACO,OAAO,EAAEA,OAAQ;UAACO,QAAQ,EAAEA,QAAS;UAACL,YAAY,EAAEA;QAAa;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAE/F;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEJ,eAEN1B,OAAA,CAACF,UAAU;MAACU,YAAY,EAAEA;IAAa;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACvC;AAEd;AAACvB,EAAA,CA1EQF,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AA4Ed,eAAeA,KAAK;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}